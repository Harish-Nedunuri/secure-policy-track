name: Build and Test Python Package

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      # PostgreSQL service to use during tests
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_ADMIN_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_ADMIN_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_INSDB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ${{ secrets.POSTGRES_ADMIN_USER }}" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # Step 3: Load environment variables from GitHub Secrets
      - name: Load environment variables
        run: |
          echo "POSTGRES_ADMIN_USER=${{ secrets.POSTGRES_ADMIN_USER }}" >> $GITHUB_ENV
          echo "POSTGRES_ADMIN_PASSWORD=${{ secrets.POSTGRES_ADMIN_PASSWORD }}" >> $GITHUB_ENV
          echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV  # Since we use a local PostgreSQL Docker container
          echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
          echo "POSTGRES_INSDB=${{ secrets.POSTGRES_INSDB }}" >> $GITHUB_ENV
          echo "DEBUG=${{ secrets.DEBUG }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .

      # Step 5: Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      # Step 6: Run unit tests with pytest
      - name: Run tests
        run: |
          pip install pytest pytest-asyncio
          pytest -vv

      # Step 7: Set up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Step 8: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 9: Set Docker image tag
      - name: Set Docker image tag
        id: set-image-tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "image_tag=policytrack:dev" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "image_tag=policytrack:latest" >> $GITHUB_ENV
          fi

      # Step 10: Log in to Azure Container Registry
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.CONTAINER_REGISTRY_SERVER }}
          username: ${{ secrets.CONTAINER_REGISTRY_ADMIN }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      # Step 11: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags:  ${{ secrets.CONTAINER_REGISTRY_SERVER }}/${{ env.image_tag }}
